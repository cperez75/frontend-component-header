const _excluded = ["className"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import DataTableContext from './DataTableContext';
import Actions from './CollapsibleButtonGroup';
function BulkActions(_ref) {
  let {
      className
    } = _ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  const tableInstance = useContext(DataTableContext);
  const {
    bulkActions,
    selectedFlatRows,
    controlledTableSelections: [{
      isEntireTableSelected
    }]
  } = tableInstance;
  const args = {
    selectedFlatRows,
    isEntireTableSelected,
    tableInstance
  };
  if (typeof bulkActions === 'function') {
    return /*#__PURE__*/React.createElement("div", {
      className: classNames('pgn__bulk-actions', className)
    }, bulkActions(args));
  }
  const actions = bulkActions.map(action => ({
    component: action,
    args
  }));
  return /*#__PURE__*/React.createElement(Actions, _extends({
    className: classNames('pgn__bulk-actions', className),
    "data-testid": "bulk-actions",
    actions: actions
  }, rest));
}
BulkActions.defaultProps = {
  className: null
};
BulkActions.propTypes = {
  /** class names for the div wrapping the button components */
  className: PropTypes.string
};
export default BulkActions;
//# sourceMappingURL=BulkActions.js.map
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _excluded = ["children", "arrowKeyNavigationSelector", "ignoredArrowKeysNames", "screenReaderText", "value", "isLoading", "errorMessageText", "onChange", "onSelected", "helpMessage"],
  _excluded2 = ["children", "onClick"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useState, useRef } from 'react';
import PropTypes from 'prop-types';
import { v4 as uuidv4 } from 'uuid';
import { useIntl } from 'react-intl';
import { KeyboardArrowUp, KeyboardArrowDown } from '../../icons';
import Icon from '../Icon';
import { FormGroupContextProvider, useFormGroupContext } from './FormGroupContext';
import FormControl from './FormControl';
import FormControlFeedback from './FormControlFeedback';
import IconButton from '../IconButton';
import Spinner from '../Spinner';
import useArrowKeyNavigation from '../hooks/useArrowKeyNavigation';
import messages from './messages';
function FormAutosuggest(_ref) {
  var children = _ref.children,
    arrowKeyNavigationSelector = _ref.arrowKeyNavigationSelector,
    ignoredArrowKeysNames = _ref.ignoredArrowKeysNames,
    screenReaderText = _ref.screenReaderText,
    value = _ref.value,
    isLoading = _ref.isLoading,
    errorMessageText = _ref.errorMessageText,
    onChange = _ref.onChange,
    onSelected = _ref.onSelected,
    helpMessage = _ref.helpMessage,
    props = _objectWithoutProperties(_ref, _excluded);
  var intl = useIntl();
  var formControlRef = useRef();
  var parentRef = useArrowKeyNavigation({
    selectors: arrowKeyNavigationSelector,
    ignoredKeys: ignoredArrowKeysNames
  });
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    isMenuClosed = _useState2[0],
    setIsMenuClosed = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isActive = _useState4[0],
    setIsActive = _useState4[1];
  var _useState5 = useState({
      displayValue: value || '',
      errorMessage: '',
      dropDownItems: []
    }),
    _useState6 = _slicedToArray(_useState5, 2),
    state = _useState6[0],
    setState = _useState6[1];
  var _useState7 = useState(null),
    _useState8 = _slicedToArray(_useState7, 2),
    activeMenuItemId = _useState8[0],
    setActiveMenuItemId = _useState8[1];
  var handleMenuItemFocus = function handleMenuItemFocus(menuItemId) {
    setActiveMenuItemId(menuItemId);
  };
  var handleItemClick = function handleItemClick(e, onClick) {
    var clickedValue = e.currentTarget.getAttribute('data-value');
    if (onSelected && clickedValue !== value) {
      onSelected(clickedValue);
    }
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        dropDownItems: [],
        displayValue: clickedValue
      });
    });
    setIsMenuClosed(true);
    if (onClick) {
      onClick(e);
    }
  };
  function getItems() {
    var strToFind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var childrenOpt = React.Children.map(children, function (child) {
      // eslint-disable-next-line no-shadow
      var _child$props = child.props,
        children = _child$props.children,
        _onClick = _child$props.onClick,
        rest = _objectWithoutProperties(_child$props, _excluded2);
      var menuItemId = uuidv4();
      return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, rest), {}, {
        children: children,
        'data-value': children,
        onClick: function onClick(e) {
          return handleItemClick(e, _onClick);
        },
        id: menuItemId,
        onFocus: function onFocus() {
          return handleMenuItemFocus(menuItemId);
        }
      }));
    });
    if (strToFind.length > 0) {
      childrenOpt = childrenOpt.filter(function (opt) {
        return opt.props.children.toLowerCase().includes(strToFind.toLowerCase());
      });
    }
    return childrenOpt;
  }
  var handleExpand = function handleExpand() {
    setIsMenuClosed(!isMenuClosed);
    var newState = {
      dropDownItems: []
    };
    if (isMenuClosed) {
      setIsActive(true);
      newState.dropDownItems = getItems(state.displayValue);
      newState.errorMessage = '';
    }
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), newState);
    });
  };
  var iconToggle = /*#__PURE__*/React.createElement(IconButton, {
    className: "pgn__form-autosuggest__icon-button",
    "data-testid": "autosuggest-iconbutton",
    tabindex: "-1",
    src: isMenuClosed ? KeyboardArrowDown : KeyboardArrowUp,
    iconAs: Icon,
    size: "sm",
    variant: "secondary",
    alt: isMenuClosed ? intl.formatMessage(messages.iconButtonOpened) : intl.formatMessage(messages.iconButtonClosed),
    onClick: function onClick(e) {
      return handleExpand(e, isMenuClosed);
    }
  });
  var leaveControl = function leaveControl() {
    setIsActive(false);
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        dropDownItems: [],
        errorMessage: !state.displayValue ? errorMessageText : ''
      });
    });
    setIsMenuClosed(true);
  };
  var handleDocumentClick = function handleDocumentClick(e) {
    if (parentRef.current && !parentRef.current.contains(e.target) && isActive) {
      leaveControl();
    }
  };
  var keyDownHandler = function keyDownHandler(e) {
    if (e.key === 'Escape' && isActive) {
      e.preventDefault();
      if (formControlRef) {
        formControlRef.current.focus();
      }
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          dropDownItems: []
        });
      });
      setIsMenuClosed(true);
    }
    if (e.key === 'Tab' && isActive) {
      leaveControl();
    }
  };
  useEffect(function () {
    document.addEventListener('keydown', keyDownHandler);
    document.addEventListener('click', handleDocumentClick, true);
    return function () {
      document.removeEventListener('click', handleDocumentClick, true);
      document.removeEventListener('keydown', keyDownHandler);
    };
  });
  useEffect(function () {
    if (value || value === '') {
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          displayValue: value
        });
      });
    }
  }, [value]);
  var setDisplayValue = function setDisplayValue(itemValue) {
    var optValue = [];
    children.forEach(function (opt) {
      optValue.push(opt.props.children);
    });
    var normalized = itemValue.toLowerCase();
    var opt = optValue.find(function (o) {
      return o.toLowerCase() === normalized;
    });
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        displayValue: opt || itemValue
      });
    });
  };
  var handleClick = function handleClick(e) {
    setIsActive(true);
    var dropDownItems = getItems(e.target.value);
    if (dropDownItems.length > 1) {
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          dropDownItems: dropDownItems,
          errorMessage: ''
        });
      });
      setIsMenuClosed(false);
    }
  };
  var handleOnChange = function handleOnChange(e) {
    var findStr = e.target.value;
    if (onChange) {
      onChange(findStr);
    }
    if (findStr.length) {
      var filteredItems = getItems(findStr);
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          dropDownItems: filteredItems,
          errorMessage: ''
        });
      });
      setIsMenuClosed(false);
    } else {
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          dropDownItems: []
        });
      });
      setIsMenuClosed(true);
    }
    setDisplayValue(e.target.value);
  };
  var _useFormGroupContext = useFormGroupContext(),
    getControlProps = _useFormGroupContext.getControlProps;
  var controlProps = getControlProps(props);
  return /*#__PURE__*/React.createElement("div", {
    className: "pgn__form-autosuggest__wrapper",
    ref: parentRef
  }, /*#__PURE__*/React.createElement("div", {
    "aria-live": "assertive",
    className: "sr-only",
    "data-testid": "autosuggest-screen-reader-options-count"
  }, "".concat(state.dropDownItems.length, " options found")), /*#__PURE__*/React.createElement(FormGroupContextProvider, {
    controlId: controlProps.id,
    isInvalid: !!state.errorMessage
  }, /*#__PURE__*/React.createElement(FormControl, _extends({
    ref: formControlRef,
    "aria-expanded": (state.dropDownItems.length > 0).toString(),
    "aria-owns": "pgn__form-autosuggest__dropdown-box",
    role: "combobox",
    "aria-autocomplete": "list",
    autoComplete: "off",
    value: state.displayValue,
    "aria-invalid": state.errorMessage,
    "aria-activedescendant": activeMenuItemId,
    onChange: handleOnChange,
    onClick: handleClick,
    trailingElement: iconToggle,
    "data-testid": "autosuggest-textbox-input"
  }, controlProps)), helpMessage && !state.errorMessage && /*#__PURE__*/React.createElement(FormControlFeedback, {
    type: "default"
  }, helpMessage), state.errorMessage && /*#__PURE__*/React.createElement(FormControlFeedback, {
    type: "invalid",
    "feedback-for": controlProps.name
  }, errorMessageText)), /*#__PURE__*/React.createElement("ul", {
    id: "pgn__form-autosuggest__dropdown-box",
    className: "pgn__form-autosuggest__dropdown",
    role: "listbox"
  }, isLoading ? /*#__PURE__*/React.createElement("div", {
    className: "pgn__form-autosuggest__dropdown-loading"
  }, /*#__PURE__*/React.createElement(Spinner, {
    animation: "border",
    variant: "dark",
    screenReaderText: screenReaderText,
    "data-testid": "autosuggest-loading-spinner"
  })) : state.dropDownItems.length > 0 && state.dropDownItems));
}
FormAutosuggest.defaultProps = {
  arrowKeyNavigationSelector: 'a:not(:disabled),li:not(:disabled, .btn-icon),input:not(:disabled)',
  ignoredArrowKeysNames: ['ArrowRight', 'ArrowLeft'],
  isLoading: false,
  className: null,
  floatingLabel: null,
  onChange: null,
  onSelected: null,
  helpMessage: '',
  placeholder: '',
  value: null,
  errorMessageText: null,
  readOnly: false,
  children: null,
  name: 'form-autosuggest',
  screenReaderText: 'loading'
};
FormAutosuggest.propTypes = {
  /**
   * Specifies the CSS selector string that indicates to which elements
   * the user can navigate using the arrow keys
  */
  arrowKeyNavigationSelector: PropTypes.string,
  /** Specifies ignored hook keys. */
  ignoredArrowKeysNames: PropTypes.arrayOf(PropTypes.string),
  /** Specifies loading state. */
  isLoading: PropTypes.bool,
  /** Specifies class name to append to the base element. */
  className: PropTypes.string,
  /** Specifies floating label to display for the input component. */
  floatingLabel: PropTypes.string,
  /** Specifies onChange event handler. */
  onChange: PropTypes.func,
  /** Specifies help information for the user. */
  helpMessage: PropTypes.string,
  /** Specifies the placeholder text for the input. */
  placeholder: PropTypes.string,
  /** Specifies values for the input. */
  value: PropTypes.string,
  /** Informs user has errors. */
  errorMessageText: PropTypes.string,
  /** Specifies the name of the base input element. */
  name: PropTypes.string,
  /** Selected list item is read-only. */
  readOnly: PropTypes.bool,
  /** Specifies the content of the `FormAutosuggest`. */
  children: PropTypes.node,
  /** Specifies the screen reader text */
  screenReaderText: PropTypes.string,
  /** Function that receives the selected value. */
  onSelected: PropTypes.func
};
export default FormAutosuggest;
//# sourceMappingURL=FormAutosuggest.js.map
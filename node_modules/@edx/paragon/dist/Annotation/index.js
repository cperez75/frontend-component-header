const _excluded = ["className", "variant", "children", "arrowPlacement"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
const Annotation = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      className,
      variant,
      children,
      arrowPlacement
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement("span", _extends({
    className: classNames(className, 'pgn__annotation', `pgn__annotation-${variant}-${arrowPlacement}`),
    ref: ref
  }, props), children);
});
Annotation.defaultProps = {
  className: undefined,
  variant: 'success',
  arrowPlacement: 'bottom'
};
Annotation.propTypes = {
  /** Specifies contents of the component. */
  children: PropTypes.node.isRequired,
  /** Specifies class name to append to the base element. */
  className: PropTypes.string,
  /** Specifies variant to use. */
  variant: PropTypes.oneOf(['error', 'success', 'warning', 'light', 'dark']),
  /** Specifies arrow position. */
  arrowPlacement: PropTypes.oneOf(['top', 'right', 'bottom', 'left'])
};
export default Annotation;
//# sourceMappingURL=index.js.map
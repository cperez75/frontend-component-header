const _excluded = ["className", "clearSelectionText"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useContext, useEffect } from 'react';
import PropTypes from 'prop-types';
import DataTableContext from '../DataTableContext';
import BaseSelectionStatus from './BaseSelectionStatus';
import { clearSelectionAction, setSelectAllRowsAllPagesAction, setSelectedRowsAction } from './data/actions';
import { getUnselectedPageRows, getRowIds } from './data/helpers';
function ControlledSelectionStatus(_ref) {
  let {
      className,
      clearSelectionText
    } = _ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  const {
    itemCount,
    page,
    controlledTableSelections: [{
      selectedRows,
      isEntireTableSelected
    }, dispatch]
  } = useContext(DataTableContext);
  useEffect(() => {
    if (isEntireTableSelected) {
      const selectedRowIds = getRowIds(selectedRows);
      const unselectedPageRows = getUnselectedPageRows(selectedRowIds, page);
      if (unselectedPageRows.length) {
        dispatch(setSelectedRowsAction(unselectedPageRows, itemCount));
      }
    }
  }, [isEntireTableSelected, selectedRows, itemCount, page, dispatch]);
  const numSelectedRows = isEntireTableSelected ? itemCount : selectedRows.length;
  const numSelectedRowsOnPage = (page || []).filter(r => r.isSelected).length;
  const selectionStatusProps = _objectSpread({
    className,
    numSelectedRows,
    numSelectedRowsOnPage,
    clearSelectionText,
    onSelectAll: () => dispatch(setSelectAllRowsAllPagesAction()),
    onClear: () => dispatch(clearSelectionAction())
  }, rest);
  return /*#__PURE__*/React.createElement(BaseSelectionStatus, selectionStatusProps);
}
ControlledSelectionStatus.defaultProps = {
  className: undefined,
  clearSelectionText: undefined
};
ControlledSelectionStatus.propTypes = {
  /** A class name to append to the base element */
  className: PropTypes.string,
  /** A text that appears on the `Clear selection` button, defaults to 'Clear Selection' */
  clearSelectionText: PropTypes.oneOfType([PropTypes.string, PropTypes.element])
};
export default ControlledSelectionStatus;
//# sourceMappingURL=ControlledSelectionStatus.js.map
{"version":3,"file":"index.js","names":["React","useEffect","useMemo","useReducer","PropTypes","useTable","useMountedLayoutEffect","classNames","Table","getVisibleColumns","requiredWhen","requiredWhenNot","getTableArgs","TableControlBar","EmptyTableContent","TableFooter","BulkActions","DropdownFilters","FilterStatus","RowStatus","SelectionStatus","ControlledSelectionStatus","SmartStatus","TableFilters","TableHeaderCell","TableCell","TableHeaderRow","TablePagination","TablePaginationMinimal","DataTableContext","TableActions","ControlledSelect","ControlledSelectHeader","DataTableLayout","ExpandAll","ExpandRow","useSelectionActions","selectionsReducer","initialState","initialSelectionsState","DataTable","_ref","columns","data","defaultColumnValues","additionalColumns","isSelectable","isPaginated","manualPagination","pageCount","itemCount","isFilterable","manualFilters","fetchData","isSortable","manualSortBy","isExpandable","renderRowSubComponent","bulkActions","tableActions","numBreakoutFilters","initialTableOptions","EmptyTableComponent","manualSelectColumn","showFiltersInSidebar","dataViewToggleOptions","disableElevation","isLoading","children","onSelectedRowsChanged","maxSelectedRows","onMaxSelectedRows","props","_objectWithoutProperties","_excluded","defaultColumn","tableOptions","updatedTableOptions","_objectSpread","stateReducer","newState","action","previousState","type","value","selectedRowIds","rowIndex","parseInt","id","selectedRowsOrdered","newSelectedRowsOrdered","filter","item","selections","selectionsDispatch","tableArgs","push","hooks","visibleColumns","selectionProps","selectedRows","length","selectedRowsById","forEach","row","useControlledState","state","selectedFlatRows","controlledTableSelections","instance","pageSize","tableStatePageSize","pageIndex","tableStatePageIndex","sortBy","tableStateSortBy","filters","tableStateFilters","tableStateSelectedRowIds","selectionActions","enhancedInstance","createElement","Provider","className","Fragment","content","defaultProps","undefined","SelectionStatusComponent","FilterStatusComponent","RowStatusComponent","isDataViewToggleEnabled","onDataViewToggle","defaultActiveStateValue","togglePlacement","propTypes","arrayOf","shape","Header","oneOfType","func","node","isRequired","accessor","string","Cell","element","Filter","filterChoices","name","number","bool","disableSortBy","buttonText","handleClick","variant","disabled","oneOf","EmptyTable"],"sources":["../../src/DataTable/index.jsx"],"sourcesContent":["import React, {\n  useEffect, useMemo, useReducer,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { useTable, useMountedLayoutEffect } from 'react-table';\n\nimport classNames from 'classnames';\nimport Table from './Table';\nimport getVisibleColumns from './utils/getVisibleColumns';\nimport { requiredWhen, requiredWhenNot } from '../utils/propTypes';\nimport getTableArgs from './utils/getTableArgs';\nimport TableControlBar from './TableControlBar';\nimport EmptyTableContent from './EmptyTable';\nimport TableFooter from './TableFooter';\nimport BulkActions from './BulkActions';\nimport DropdownFilters from './DropdownFilters';\nimport FilterStatus from './FilterStatus';\nimport RowStatus from './RowStatus';\nimport SelectionStatus from './selection/SelectionStatus';\nimport ControlledSelectionStatus from './selection/ControlledSelectionStatus';\nimport SmartStatus from './SmartStatus';\nimport TableFilters from './TableFilters';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableCell from './TableCell';\nimport TableHeaderRow from './TableHeaderRow';\nimport TablePagination from './TablePagination';\nimport TablePaginationMinimal from './TablePaginationMinimal';\nimport DataTableContext from './DataTableContext';\nimport TableActions from './TableActions';\nimport ControlledSelect from './selection/ControlledSelect';\nimport ControlledSelectHeader from './selection/ControlledSelectHeader';\nimport DataTableLayout from './DataTableLayout';\nimport ExpandAll from './ExpandAll';\nimport ExpandRow from './ExpandRow';\n\nimport { useSelectionActions } from './hooks';\nimport selectionsReducer, { initialState as initialSelectionsState } from './selection/data/reducer';\n\nfunction DataTable({\n  columns, data, defaultColumnValues, additionalColumns, isSelectable,\n  isPaginated, manualPagination, pageCount, itemCount,\n  isFilterable, manualFilters, fetchData, initialState,\n  isSortable, manualSortBy,\n  isExpandable, renderRowSubComponent,\n  bulkActions, tableActions, numBreakoutFilters,\n  initialTableOptions,\n  EmptyTableComponent,\n  manualSelectColumn,\n  showFiltersInSidebar,\n  dataViewToggleOptions,\n  disableElevation,\n  isLoading,\n  children,\n  onSelectedRowsChanged,\n  maxSelectedRows,\n  onMaxSelectedRows,\n  ...props\n}) {\n  const defaultColumn = useMemo(\n    () => (defaultColumnValues),\n    [defaultColumnValues],\n  );\n  const tableOptions = useMemo(() => {\n    const updatedTableOptions = {\n      stateReducer: (newState, action, previousState) => {\n        switch (action.type) {\n          // Note: we override the `toggleAllRowsSelected` action\n          // from react-table because it only clears the selections on the\n          // currently visible page; it does not clear the `selectedRowIds`\n          // as we would expect for selections on different pages. Instead, we\n          // force `selectedRowIds` to be cleared when `toggleAllRowsSelected(false)`\n          // is called.\n          case 'toggleAllRowsSelected': {\n            if (action.value) {\n              return newState;\n            }\n            return {\n              ...newState,\n              selectedRowIds: {},\n            };\n          }\n          /*  Note: We override the `toggleRowSelected` action from react-table\n              because we need to preserve the order of the selected rows.\n              While `selectedRowIds` is an object that contains the selected rows as key-value pairs,\n              it does not maintain the order of selection. Therefore, we have added the `selectedRowsOrdered` property\n              to keep track of the order in which the rows were selected.\n          */\n          case 'toggleRowSelected': {\n            const rowIndex = parseInt(action.id, 10);\n            const { selectedRowsOrdered = [] } = previousState;\n\n            let newSelectedRowsOrdered;\n            if (action.value) {\n              newSelectedRowsOrdered = [...selectedRowsOrdered, rowIndex];\n            } else {\n              newSelectedRowsOrdered = selectedRowsOrdered.filter((item) => item !== rowIndex);\n            }\n\n            return {\n              ...newState,\n              selectedRowsOrdered: newSelectedRowsOrdered,\n            };\n          }\n          default:\n            return newState;\n        }\n      },\n      ...initialTableOptions,\n    };\n    return {\n      columns,\n      data,\n      defaultColumn,\n      manualFilters,\n      manualPagination,\n      manualSortBy,\n      initialState,\n      ...updatedTableOptions,\n    };\n  }, [initialTableOptions, columns, data, defaultColumn, manualFilters, manualPagination, manualSortBy, initialState]);\n\n  const [selections, selectionsDispatch] = useReducer(selectionsReducer, initialSelectionsState);\n\n  if (isPaginated && manualPagination) {\n    // pageCount is required when pagination is manual, if it's not there passing -1 as per react-table docs\n    tableOptions.pageCount = pageCount || -1;\n  }\n\n  // NB: Table args *must* be in a particular order\n  const tableArgs = getTableArgs({\n    tableOptions, isFilterable, isSelectable, isPaginated, isSortable, isExpandable,\n  });\n  // adds selection column and action columns as necessary\n  tableArgs.push(hooks => {\n    hooks.visibleColumns.push(\n      visibleColumns => getVisibleColumns(isSelectable, visibleColumns, additionalColumns, manualSelectColumn),\n    );\n  });\n\n  // Pass any controlled selections from context to the appropriate ``useTable`` arguments to maintain\n  // correct selection states on rows, both from a data perspective and in the UI.\n  const selectionProps = {};\n  const { selectedRows } = selections;\n  if (selectedRows.length > 0) {\n    const selectedRowsById = {};\n    selectedRows.forEach((row) => {\n      selectedRowsById[row.id] = true;\n    });\n    tableArgs.push(hooks => {\n      hooks.useControlledState.push(\n        (state) => ({ ...state, selectedRowIds: selectedRowsById }),\n      );\n    });\n    selectionProps.selectedFlatRows = selectedRows;\n  }\n  const controlledTableSelections = [selections, selectionsDispatch];\n\n  // Use the state and functions returned from useTable to build your UI\n  const instance = useTable(...tableArgs);\n\n  const {\n    pageSize: tableStatePageSize,\n    pageIndex: tableStatePageIndex,\n    sortBy: tableStateSortBy,\n    filters: tableStateFilters,\n    selectedRowIds: tableStateSelectedRowIds,\n  } = instance.state;\n\n  useEffect(() => {\n    if (fetchData) {\n      fetchData({\n        pageSize: tableStatePageSize,\n        pageIndex: tableStatePageIndex,\n        sortBy: tableStateSortBy,\n        filters: tableStateFilters,\n      });\n    }\n  }, [fetchData, tableStatePageSize, tableStatePageIndex, tableStateSortBy, tableStateFilters]);\n\n  useMountedLayoutEffect(() => {\n    if (onSelectedRowsChanged) {\n      onSelectedRowsChanged(tableStateSelectedRowIds);\n    }\n  }, [tableStateSelectedRowIds, onSelectedRowsChanged]);\n\n  const selectionActions = useSelectionActions(instance, controlledTableSelections);\n\n  const enhancedInstance = {\n    ...instance,\n    itemCount,\n    numBreakoutFilters,\n    bulkActions,\n    tableActions,\n    controlledTableSelections,\n    showFiltersInSidebar,\n    dataViewToggleOptions,\n    renderRowSubComponent,\n    disableElevation,\n    isLoading,\n    isSelectable,\n    isPaginated,\n    manualSelectColumn,\n    maxSelectedRows,\n    onMaxSelectedRows,\n    ...selectionProps,\n    ...selectionActions,\n    ...props,\n  };\n\n  return (\n    <DataTableContext.Provider value={enhancedInstance}>\n      <DataTableLayout>\n        <div className={classNames('pgn__data-table-wrapper', {\n          'hide-shadow': !!disableElevation,\n        })}\n        >\n          {children || (\n          <>\n            <TableControlBar />\n            <Table />\n            <EmptyTableComponent content=\"No results found\" />\n            <TableFooter />\n          </>\n          )}\n        </div>\n      </DataTableLayout>\n    </DataTableContext.Provider>\n  );\n}\n\nDataTable.defaultProps = {\n  additionalColumns: [],\n  defaultColumnValues: {},\n  isFilterable: false,\n  isPaginated: false,\n  isSelectable: false,\n  isSortable: false,\n  manualFilters: false,\n  manualPagination: false,\n  manualSortBy: false,\n  fetchData: null,\n  initialState: {},\n  initialTableOptions: {},\n  EmptyTableComponent: EmptyTableContent,\n  children: null,\n  bulkActions: [],\n  tableActions: [],\n  numBreakoutFilters: 1,\n  manualSelectColumn: undefined,\n  SelectionStatusComponent: SelectionStatus,\n  FilterStatusComponent: FilterStatus,\n  RowStatusComponent: RowStatus,\n  showFiltersInSidebar: false,\n  dataViewToggleOptions: {\n    isDataViewToggleEnabled: false,\n    onDataViewToggle: () => {},\n    defaultActiveStateValue: 'card',\n    togglePlacement: 'left',\n  },\n  disableElevation: false,\n  renderRowSubComponent: undefined,\n  isExpandable: false,\n  isLoading: false,\n  onSelectedRowsChanged: undefined,\n  maxSelectedRows: undefined,\n  onMaxSelectedRows: undefined,\n};\n\nDataTable.propTypes = {\n  /** Definition of table columns */\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    /** User visible column name */\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    /** String used to access the correct cell data for this column */\n    accessor: requiredWhenNot(PropTypes.string, 'Cell'),\n    /** Specifies a function that receives `row` as argument and returns cell content */\n    Cell: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n    /** Specifies filter component */\n    Filter: PropTypes.func,\n    /** Specifies filter type */\n    filter: PropTypes.string,\n    /** Specifies filter choices */\n    filterChoices: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.number,\n      value: PropTypes.string,\n    })),\n  })).isRequired,\n  /** Data to be displayed in the table */\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  /** table rows can be selected */\n  isSelectable: PropTypes.bool,\n  /** Alternate column for selecting rows. See react table useSort docs for more information */\n  manualSelectColumn: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    Cell: PropTypes.func.isRequired,\n    disableSortBy: PropTypes.bool.isRequired,\n  }),\n  /** Table columns can be sorted */\n  isSortable: PropTypes.bool,\n  /** Indicates that sorting will be done via backend API. A fetchData function must be provided */\n  manualSortBy: PropTypes.bool,\n  /** Paginate the table */\n  isPaginated: PropTypes.bool,\n  /** Indicates that pagination will be done manually. A fetchData function must be provided */\n  manualPagination: PropTypes.bool,\n  // eslint-disable-next-line react/require-default-props\n  pageCount: requiredWhen(PropTypes.number, 'manualPagination'),\n  /** Table rows can be filtered, using a default filter in the default column values, or in the column definition */\n  isFilterable: PropTypes.bool,\n  /** Indicates that filtering will be done via a backend API. A fetchData function must be provided */\n  manualFilters: PropTypes.bool,\n\n  /** defaults that will be set on each column. Will be overridden by individual column values */\n  defaultColumnValues: PropTypes.shape({\n    /** A default filter component for the column */\n    Filter: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  }),\n  /** Actions or other additional non-data columns can be added here  */\n  additionalColumns: PropTypes.arrayOf(PropTypes.shape({\n    /** id must be unique from other columns ids */\n    id: PropTypes.string.isRequired,\n    /** column header that will be displayed to the user */\n    Header: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    /** Component that renders in the added column. It will receive the row as a prop */\n    Cell: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  })),\n  /** Function that will fetch table data. Called when page size, page index or filters change.\n    * Meant to be used with manual filters and pagination */\n  fetchData: PropTypes.func,\n  /** Initial state passed to react-table's documentation https://react-table.tanstack.com/docs/api/useTable */\n  initialState: PropTypes.shape({\n    pageSize: requiredWhen(PropTypes.number, 'isPaginated'),\n    pageIndex: requiredWhen(PropTypes.number, 'isPaginated'),\n    filters: requiredWhen(PropTypes.arrayOf(PropTypes.shape()), 'manualFilters'),\n    sortBy: requiredWhen(PropTypes.arrayOf(PropTypes.shape()), 'manualSortBy'),\n    selectedRowIds: PropTypes.shape(),\n    selectedRowsOrdered: PropTypes.arrayOf(PropTypes.number),\n  }),\n  /** Table options passed to react-table's useTable hook. Will override some options passed in to DataTable, such\n     as: data, columns, defaultColumn, manualFilters, manualPagination, manualSortBy, and initialState */\n  initialTableOptions: PropTypes.shape({}),\n  /** Actions to be performed on the table. Called with the table instance. Not displayed if rows are selected. */\n  itemCount: PropTypes.number.isRequired,\n  /** Actions to be performed on selected rows of the table. Called with the selected rows.\n   *  Only displayed if rows are selected. */\n  bulkActions: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.shape({\n          /** Bulk action button text */\n          buttonText: PropTypes.string.isRequired,\n          /** handleClick will be passed the selected rows */\n          handleClick: PropTypes.func.isRequired,\n          /** classnames for button class */\n          className: PropTypes.string,\n          /** optional button variant; only relevant for the first two buttons */\n          variant: PropTypes.string,\n          /** disables button */\n          disabled: PropTypes.bool,\n        }),\n        /** function passed selected items, should return action object */\n        PropTypes.func,\n        /** A custom component representing an action */\n        PropTypes.element,\n      ]),\n    ),\n    /** Function for rendering custom components */\n    PropTypes.func,\n    /** A custom component representing an action */\n    PropTypes.element,\n  ]),\n  /** Function for rendering custom components, called with the table instance */\n  tableActions: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.shape({\n          /** Bulk action button text */\n          buttonText: PropTypes.string.isRequired,\n          /** handleClick will be passed the selected rows */\n          handleClick: PropTypes.func.isRequired,\n          /** classnames for button class */\n          className: PropTypes.string,\n          /** optional button variant; only relevant for the first two buttons */\n          variant: PropTypes.string,\n          /** disables button */\n          disabled: PropTypes.bool,\n        }),\n        /** function passed table instance, should return action object */\n        PropTypes.func,\n        /** A custom component representing an action */\n        PropTypes.element,\n      ]),\n    ),\n    /** Function for rendering custom components */\n    PropTypes.func,\n    /** A custom component representing an action */\n    PropTypes.element,\n  ]),\n  /** Number between one and four filters that can be shown on the top row. */\n  numBreakoutFilters: PropTypes.oneOf([1, 2, 3, 4]),\n  /** Component to be displayed when the table is empty */\n  EmptyTableComponent: PropTypes.func,\n  /** Component to be displayed for row status, ie, 10 of 20 rows. Displayed by default in the TableControlBar */\n  RowStatusComponent: PropTypes.func,\n  /** Component to be displayed for selection status. Displayed when there are selected rows and no active filters */\n  SelectionStatusComponent: PropTypes.func,\n  /** Component to be displayed for filter status. Displayed when there are active filters. */\n  FilterStatusComponent: PropTypes.func,\n  /** If children are not provided a table with control bar and footer will be rendered */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  /** If true filters will be shown on sidebar instead */\n  showFiltersInSidebar: PropTypes.bool,\n  /** options for data view toggle */\n  dataViewToggleOptions: PropTypes.shape({\n    /** Whether to show a toggle button group which allows view switching between card and table views */\n    isDataViewToggleEnabled: PropTypes.bool,\n    /** Callback invoked when the toggle buttons are clicked, with value of selected button passed in */\n    onDataViewToggle: PropTypes.func,\n    /** default value for toggle active state */\n    defaultActiveStateValue: PropTypes.string,\n    /** placement of toggle 'bottom' will push it to the bottom row in\n     * actions section. Only 'left' and 'bottom' are supported */\n    togglePlacement: PropTypes.string,\n  }),\n  /** Remove the default box shadow on the component */\n  disableElevation: PropTypes.bool,\n  /** A function that will render contents of expanded row, accepts `row` as a prop. */\n  renderRowSubComponent: PropTypes.func,\n  /** Indicates whether table supports expandable rows. */\n  isExpandable: PropTypes.bool,\n  /** Indicates whether the table should show loading states. */\n  isLoading: PropTypes.bool,\n  /** Callback function called when row selections change. */\n  onSelectedRowsChanged: PropTypes.func,\n  /** Indicates the max of rows selectable in the table. Requires isSelectable prop */\n  maxSelectedRows: PropTypes.number,\n  /** Callback after selected max rows. Requires isSelectable and maxSelectedRows props */\n  onMaxSelectedRows: PropTypes.func,\n};\n\nDataTable.BulkActions = BulkActions;\nDataTable.EmptyTable = EmptyTableContent;\nDataTable.DropdownFilters = DropdownFilters;\nDataTable.FilterStatus = FilterStatus;\nDataTable.RowStatus = RowStatus;\nDataTable.SelectionStatus = SelectionStatus;\nDataTable.SmartStatus = SmartStatus;\nDataTable.Table = Table;\nDataTable.TableCell = TableCell;\nDataTable.TableControlBar = TableControlBar;\nDataTable.TableFilters = TableFilters;\nDataTable.TableFooter = TableFooter;\nDataTable.TableHeaderCell = TableHeaderCell;\nDataTable.TableHeaderRow = TableHeaderRow;\nDataTable.TablePagination = TablePagination;\nDataTable.TablePaginationMinimal = TablePaginationMinimal;\nDataTable.TableActions = TableActions;\nDataTable.ControlledSelectionStatus = ControlledSelectionStatus;\nDataTable.ControlledSelect = ControlledSelect;\nDataTable.ControlledSelectHeader = ControlledSelectHeader;\nDataTable.ExpandAll = ExpandAll;\nDataTable.ExpandRow = ExpandRow;\n\nexport default DataTable;\n"],"mappings":"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"}
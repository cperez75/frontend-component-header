const _excluded = ["row"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import PropTypes from 'prop-types';
import { ExpandLess, ExpandMore } from '../../icons';
import Icon from '../Icon';
import IconButton from '../IconButton';
const EXPAND_COLLAPSE_ICON_SIZE = 'inline';
function ExpandRow(_ref) {
  let {
      row
    } = _ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement("span", _extends({}, row.getToggleRowExpandedProps(), rest), row.isExpanded ? /*#__PURE__*/React.createElement(IconButton, {
    src: ExpandLess,
    iconAs: Icon,
    alt: "Collapse row",
    size: EXPAND_COLLAPSE_ICON_SIZE
  }) : /*#__PURE__*/React.createElement(IconButton, {
    src: ExpandMore,
    iconAs: Icon,
    alt: "Expand row",
    size: EXPAND_COLLAPSE_ICON_SIZE
  }));
}
ExpandRow.propTypes = {
  /** Row data that is received from `react-table` API. */
  row: PropTypes.shape({
    /** Specifies if row is in expanded state. */
    isExpanded: PropTypes.bool,
    /** Function that returns props for the wrapper component to handle expand behaviour. */
    getToggleRowExpandedProps: PropTypes.func.isRequired
  }).isRequired
};
export default ExpandRow;
//# sourceMappingURL=ExpandRow.js.map
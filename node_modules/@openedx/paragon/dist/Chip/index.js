var _excluded = ["children", "className", "variant", "iconBefore", "iconAfter", "onIconBeforeClick", "onIconAfterClick", "disabled"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
// @ts-ignore
import Icon from '../Icon';
var STYLE_VARIANTS = ['light', 'dark'];
export var CHIP_PGN_CLASS = 'pgn__chip';
var Chip = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
    className = _ref.className,
    variant = _ref.variant,
    iconBefore = _ref.iconBefore,
    iconAfter = _ref.iconAfter,
    onIconBeforeClick = _ref.onIconBeforeClick,
    onIconAfterClick = _ref.onIconAfterClick,
    disabled = _ref.disabled,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: classNames(CHIP_PGN_CLASS, "pgn__chip-".concat(variant), className, {
      disabled: disabled
    }),
    ref: ref
  }, props), iconBefore && /*#__PURE__*/React.createElement("div", {
    className: classNames('pgn__chip__icon-before')
  }, /*#__PURE__*/React.createElement(Icon, {
    src: iconBefore
  })), /*#__PURE__*/React.createElement("div", {
    className: classNames('pgn__chip__label', {
      'p-before': iconBefore,
      'p-after': iconAfter
    })
  }, children), iconAfter && /*#__PURE__*/React.createElement("div", {
    className: classNames('pgn__chip__icon-after', {
      active: onIconAfterClick
    }),
    role: "button",
    onClick: onIconAfterClick,
    onKeyPress: onIconAfterClick,
    tabIndex: disabled ? -1 : 0,
    "data-testid": "icon-after"
  }, /*#__PURE__*/React.createElement(Icon, {
    src: iconAfter
  })));
});
Chip.propTypes = {
  /** Specifies the content of the `Chip`. */
  children: PropTypes.node.isRequired,
  /** Specifies an additional `className` to add to the base element. */
  className: PropTypes.string,
  /** The `Chip` style variant to use. */
  variant: PropTypes.oneOf(STYLE_VARIANTS),
  /** Disables the `Chip`. */
  disabled: PropTypes.bool,
  /**
   * An icon component to render before the content.
   * Example import of a Paragon icon component:
   *
   * `import { Check } from '@openedx/paragon/icons';`
   */
  iconBefore: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
  /** A click handler for the `Chip` icon before. */
  onIconBeforeClick: PropTypes.func,
  /**
   * An icon component to render before after the content.
   * Example import of a Paragon icon component:
   *
   * `import { Check } from '@openedx/paragon/icons';`
   */
  iconAfter: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
  /** A click handler for the `Chip` icon after. */
  onIconAfterClick: PropTypes.func
};
Chip.defaultProps = {
  className: undefined,
  variant: 'light',
  disabled: false,
  iconBefore: undefined,
  iconAfter: undefined,
  onIconBeforeClick: undefined,
  onIconAfterClick: undefined
};
export default Chip;
//# sourceMappingURL=index.js.map